#################################################################################################################
//Dynamic Programming
//Climbing Stairs(classic DP problem)
public int climbStairs(int n) {
    if (n == 1) return 1;
    int[] dp = new int[n + 1];
    dp[1] = 1;
    dp[2] = 2;
    for (int i = 3; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }
    return dp[n];
}

//Longest Increasing Subsequence:
public int lengthOfLIS(int[] nums) {
    if (nums == null || nums.length == 0) return 0;
    int[] dp = new int[nums.length];
    int max = 1;
    Arrays.fill(dp, 1);
    for (int i = 1; i < nums.length; i++) {
        for (int j = 0; j < i; j++) {
            if (nums[i] > nums[j]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
        max = Math.max(max, dp[i]);
    }
    return max;
}

//Coin change problem
public int coinChange(int[] coins, int amount) {
    int[] dp = new int[amount + 1];
    Arrays.fill(dp, amount + 1);
    dp[0] = 0;
    for (int i = 1; i <= amount; i++) {
        for (int coin : coins) {
            if (i - coin >= 0) {
                dp[i] = Math.max(dp[i], dp[i - coin] + 1);
            }
        }
    }
    return dp[amount] > amount ? -1 : dp[amount];
}

####################################################################################################
//Trees and Graphs
//Binary Tree Inorder Traversal:
public List<Integer> inorderTraversal(TreeNode root) {
    List<Integer> res = new ArrayList<>();
    Stack<TreeNode> stack = new Stack<>();
    TreeNode curr = root;
    while (curr != null || !stack.isEmpty()) {
        while (curr != null) {
            stack.push(curr);
            curr = curr.left;
        }
        curr = stack.pop();
        res.add(curr.val);
        curr = curr.right;
    }
    return res;
}


//Graph - Depth First Search:
public void DFS(int v, boolean[] visited, List<List<Integer>> adjList) {
    visited[v] = true;
    System.out.print(v + " ");
    for (int neighbor : adjList.get(v)) {
        if (!visited[neighbor]) {
            DFS(neighbor, visited, adjList);
        }
    }
}

//Level order traversal of a binary tree
public List<List<Integer>> levelOrder(TreeNode root) {
    List<List<Integer>> result = new ArrayList<>();
    if (root == null) return result;
    Queue<TreeNode> queue = new LinkedList<>();
    queue.add(root);
    while (!queue.isEmpty()) {
        List<Integer> level = new ArrayList<>();
        int size = queue.size();
        for (int i = 0; i < size; i++) {
            TreeNode node = queue.poll();
            level.add(node.val);
            if (node.left != null) queue.add(node.left);
            if (node.right != null) queue.add(node.right);
        }
        result.add(level);
    }
    return result;
}


//check if a binary tree is balanced
public boolean isBalanced(TreeNode root) {
    return height(root) != -1;
}

private int height(TreeNode node) {
    if (node == null) return 0;
    int leftHeight = height(node.left);
    if (leftHeight == -1) return -1;
    int rightHeight = height(node.right);
    if (rightHeight == -1) return -1;
    if (Math.abs(leftHeight - rightHeight) > 1) return -1;
    return Math.max(leftHeight, rightHeight) + 1;
}

####################################################################################################
//Linked List
//Delete a cycle in a linked list
public boolean hasCycle(ListNode head) {
    if (head == null || head.next == null) {
        return false;
    }
    ListNode slow = head;
    ListNode fast = head.next;
    while (slow != fast) {
        if (fast == null || fast.next == null) {
            return false;
        }
        slow = slow.next;
        fast = fast.next.next;
    }
    return true;
}

//Reverse a linked list
public ListNode reverseList(ListNode head) {
    ListNode prev = null;
    ListNode curr = head;
    while (curr != null) {
        ListNode nextTemp = curr.next;
        curr.next = prev;
        prev = curr;
        curr = nextTemp;
    }
    return prev;
}

//find the intersection of two linked lists
public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    if (headA == null || headB == null) return null;
    ListNode a = headA;
    ListNode b = headB;
    while (a != b) {
        a = (a == null) ? headB : a.next;
        b = (b == null) ? headA : b.next;
    }
    return a;
}

//Merge two sorted linked lists 
public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
    ListNode dummy = new ListNode(0);
    ListNode current = dummy;
    while (l1 != null && l2 != null) {
        if (l1.val <= l2.val) {
            current.next = l1;
            l1 = l1.next;
        } else {
            current.next = l2;
            l2 = l2.next;
        }
        current = current.next;
    }
    current.next = (l1 != null) ? l1 : l2;
    return dummy.next;
}




##########################################################################################################
//Array and string Manipulation
//Longest substring without repeating characters
public int lengthOfLongestSubstring(String s) {
    int n = s.length(), ans = 0;
    Map<Character, Integer> map = new HashMap<>();
    for (int j = 0, i = 0; j < n; j++) {
        if (map.containsKey(s.charAt(j))) {
            i = Math.max(map.get(s.charAt(j)), i);
        }
        ans = Math.max(ans, j - i + 1);
        map.put(s.charAt(j), j + 1);
    }
    return ans;
}

//Find missing number in an array
public int findMissingNumber(int[] nums) {
    int n = nums.length;
    int total = (n + 1) * (n + 2) / 2;
    for (int num : nums) {
        total -= num;
    }
    return total;
}

//Two Sum Problem
public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < nums.length; i++) {
        int complement = target - nums[i];
        if (map.containsKey(complement)) {
            return new int[] { map.get(complement), i };
        }
        map.put(nums[i], i);
    }
    throw new IllegalArgumentException("No two sum solution");
}

//Find longest common prefix
public String longestCommonPrefix(String[] strs) {
    if (strs == null || strs.length == 0) return "";
    String prefix = strs[0];
    for (int i = 1; i < strs.length; i++) {
        while (strs[i].indexOf(prefix) != 0) {
            prefix = prefix.substring(0, prefix.length() - 1);
            if (prefix.isEmpty()) return "";
        }
    }
    return prefix;
}

-Difference between Stack and Queue
A stack is a Last-In-First-Out (LIFO) data structure, where the last element added is the first to be removed.
A queue is a First-In-First-Out (FIFO) data structure, where the first element added is the first to be removed.

-What is the time complexity of binary search?
The time complexity of binary search is O(log n).

Dynamic Programming
Climbing Stairs

Learn how to identify problems that can be solved using dynamic programming.
Practice breaking down problems into subproblems and using memoization or tabulation to store results.
Longest Increasing Subsequence

Understand the use of dynamic programming to optimize the solution.
Get comfortable with nested loops and how to update the state based on previous results.
Coin Change Problem

Focus on how to approach problems where you need to find the minimum or maximum number of ways to achieve a target using given resources.
Trees and Graphs
Binary Tree Inorder Traversal

Practice different tree traversal techniques (inorder, preorder, postorder).
Understand how to use stacks and recursion for tree traversals.
Graph - Depth First Search (DFS)

Learn how to traverse graphs using DFS.
Understand how to manage visited nodes to prevent cycles and infinite loops.
Level Order Traversal of a Binary Tree

Practice using queues to traverse trees level by level.
Understand the breadth-first search (BFS) approach.
Check if a Binary Tree is Balanced

Learn how to check tree properties recursively.
Understand the importance of maintaining balance in trees and its impact on performance.
Linked Lists
Detect a Cycle in a Linked List

Understand the use of two-pointer (slow and fast) techniques to detect cycles.
Reverse a Linked List

Practice manipulating pointers to reverse a singly linked list.
Find the Intersection of Two Linked Lists

Learn how to find common nodes between two linked lists efficiently.
Merge Two Sorted Linked Lists

Understand how to merge lists while maintaining order.
Array and String Manipulation
Longest Substring Without Repeating Characters

Practice using sliding window techniques and hash maps to track characters.
Find Missing Number in an Array

Understand mathematical approaches and their implementation in code.
Two Sum Problem

Learn how to use hash maps to achieve efficient lookups.
Find Longest Common Prefix

Practice string manipulation and comparison techniques.
Additional Tips
Understand the Concepts:

Don't just memorize the solutions. Understand the underlying principles and why each solution works.
Practice Coding:

Use online platforms like LeetCode, HackerRank, or CodeSignal to practice similar problems.
Write code without looking at the solutions to simulate interview conditions.
Analyze Time and Space Complexity:

Always consider and articulate the time and space complexity of your solutions.
Aim to optimize your solutions where possible.
Review and Learn:

After solving a problem, review your solution and compare it with others. Learn alternative approaches and optimizations.

Data Structures: Arrays, Linked Lists, Stacks, Queues, Trees, Graphs, Hash Tables.
Algorithms: Sorting, Searching, Recursion, Dynamic Programming, Greedy Algorithms, Divide and Conquer.
